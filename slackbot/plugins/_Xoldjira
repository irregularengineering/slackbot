    @botcmd(split_args_with=';')
    def jira_repos(self, msg, args):
        """Find issues on specific board and specific status. Delimeter is ";". Exampe !jira_repos CI/CD Board; QA Verified"""
        if len(args) != 2:
            yield "Check if you provide 2 agruments with ';' as a delimeter"
            return ''
        yield "Be patient, it could take some time"
        board = args.pop(0)
        if args[0].startswith(" "):
            status = args[0][1:]
        else:
            status = args[0]
        r = requests.get(self.config['API_URL'] + "/rest/greenhopper/1.0/rapidview", auth=(self.config['USERNAME'], self.config['PASSWORD']))
        if r.status_code != 200:
            yield "Bot not able to get all boards"
            return ''
        allboards = r.json()
        rapidview_id = self.get_data(allboards["views"], "name", board, "id")
        if rapidview_id == None:
            exit_code = board + " not found or Bot do not have permissions to that board."
            yield exit_code
            return ''
        if self.get_data(allboards["views"], "name", board, "sprintSupportEnabled") != False:
            r1 = requests.get(self.config['API_URL'] + "/rest/greenhopper/latest/sprintquery/" + str(rapidview_id), auth=(self.config['USERNAME'], self.config['PASSWORD']))
            if r1.status_code != 200:
                yield "Bot not able to get sprint data"
                return ''
            sprint = r1.json()
            sprint_id = self.get_data(sprint["sprints"], "state", "ACTIVE", "id")
            r2 = requests.get(self.config['API_URL'] + "/rest/greenhopper/latest/rapid/charts/sprintreport?rapidViewId=" + str(rapidview_id) + "&sprintId=" + str(sprint_id), auth=(self.config['USERNAME'], self.config['PASSWORD']))
            if r2.status_code != 200:
                yield "Bot not able to get board details"
                return ''
            for item in r2.json()["contents"]["completedIssues"] and r2.json()["contents"]["issuesNotCompletedInCurrentSprint"]:
                if status == item.get("statusName") and (requests.get(self.config['API_URL'] + "/rest/api/2/issue/" + item.get("key") + "?expand", auth=(self.config['USERNAME'], self.config['PASSWORD']))).json()["fields"][self.config['FIELD_CHECK']] != None:
                    links = ""
                    a = (requests.get(self.config['API_URL'] + "/rest/api/2/issue/" + item.get("key") + "?expand", auth=(self.config['USERNAME'], self.config['PASSWORD']))).json()["fields"][self.config['FIELD_CHECK']]
                    for x in range(len(a)):
                        links += a[x] + "  "
                    self.send_card(title=item.get("key"),
                        body=links,
                        in_reply_to=msg)
        else:
            r1 = requests.get(self.config['API_URL'] + "/rest/agile/1.0/board/" + str(rapidview_id) + "/issue?maxResults=100", auth=(self.config['USERNAME'], self.config['PASSWORD']))
            if r1.status_code != 200:
                yield "Bot not able to get agile data"
                return ''
            agile = r1.json()
            if status.lower() == "blocked/needs info":
                status = "Blocked"
            elif status.lower() == "cd candidate":
                status = "Ready for Scheduling"
            elif status.lower() == "ready for development":
                status = "Ready for Development"
            elif status.lower() == "dev in progress":
                status = "In Progress"
            elif status.lower() == "resolved":
                status = "Resolved"
            elif status.lower() == "ready for qa":
                status = "Ready For QA"
            elif status.lower() == "qa verified":
                status = "QA Verified"
            elif status.lower() == "released to stage":
                status = "Released To STAGE"
            elif status.lower() == "closed":
                status = "Closed"
            else:
                yield "Issue status not found"
                return ''
            for item in agile["issues"]:
                if status == item.get("fields")["status"]["name"] and (requests.get(self.config['API_URL'] + "/rest/api/2/issue/" + item.get("key") + "?expand", auth=(self.config['USERNAME'], self.config['PASSWORD']))).json()["fields"][self.config['FIELD_CHECK']] != None:
                    links = ""
                    a = (requests.get(self.config['API_URL'] + "/rest/api/2/issue/" + item.get("key") + "?expand", auth=(self.config['USERNAME'], self.config['PASSWORD']))).json()["fields"][self.config['FIELD_CHECK']]
                    for x in range(len(a)):
                        links += a[x] + "  "
                    self.send_card(title=item.get("key"),
                        body=links,
                        in_reply_to=msg)
        try:
            links
            self.send_card(title='Done',
            color='green',
            in_reply_to=msg)
        except NameError:
            self.send_card(title='Tickets with repos not found',
            color='red',
            in_reply_to=msg)
